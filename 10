from qiskit import QuantumCircuit, execute, Aer
import numpy as np
import matplotlib.pyplot as plt
import threading
import time
import sys

def print_board(board):
    print('-----')
    print(f'{board[6]}|{board[7]}|{board[8]}')
    print('-----')
    print(f'{board[3]}|{board[4]}|{board[5]}')
    print('-----')
    print(f'{board[0]}|{board[1]}|{board[2]}')
    print('-----')

def check_winner(board, mark):
    return (
        (board[0] == mark and board[1] == mark and board[2] == mark) or
        (board[3] == mark and board[4] == mark and board[5] == mark) or
        (board[6] == mark and board[7] == mark and board[8] == mark) or
        (board[0] == mark and board[3] == mark and board[6] == mark) or
        (board[1] == mark and board[4] == mark and board[7] == mark) or
        (board[2] == mark and board[5] == mark and board[8] == mark) or
        (board[0] == mark and board[4] == mark and board[8] == mark) or
        (board[2] == mark and board[4] == mark and board[6] == mark)
    )

def timer_input(timeout):
    move = [None]
    timer_running = [True]
    
    # Countdown timer thread
    def countdown():
        for i in range(timeout, 0, -1):
            if not timer_running[0]:
                break
            sys.stdout.write(f"\rTime left: {i} seconds ")
            sys.stdout.flush()
            time.sleep(1)
        if timer_running[0]:
            sys.stdout.write("\rTime's up!               \n")

    # Quantum move thread (simulating a player's move with quantum randomness)
    def get_input():
        move[0] = np.random.randint(0, 9)  # Select a random move using quantum randomness (simulating a player move)

    # Start the countdown and input threads
    countdown_thread = threading.Thread(target=countdown)
    input_thread = threading.Thread(target=get_input)
    
    countdown_thread.start()
    input_thread.start()

    input_thread.join(timeout)
    timer_running[0] = False  # Stop the timer

    countdown_thread.join()  # Ensure countdown finishes

    return move[0]  # Return the selected move (using quantum randomness)

# Get player names
player_1_name = input("Enter Player 1's name: ")
player_2_name = input("Enter Player 2's name: ")

# Initialize scoreboard
scoreboard = {player_1_name: 0, player_2_name: 0}

while True:
    # Initialize board, circuit, and variables for the game
    board = [' ' for _ in range(9)]
    circuit = QuantumCircuit(9, 9)
    entangled_pairs = [(1, 6), (7, 8), (4, 5)]

    # Initialize entangled states
    for pair in entangled_pairs:
        circuit.h(pair[0])  # Hadamard gate
        circuit.x(pair[1])  # X gate
        circuit.cx(pair[0], pair[1])  # Controlled-X gate

    undo_used = {player_1_name: False, player_2_name: False}
    winner = None
    turn = 0

    while turn < 9:
        current_player_name = player_1_name if turn % 2 == 0 else player_2_name
        mark = 'X' if turn % 2 == 0 else 'O'

        # Quantum player move with timer
        while True:
            move = timer_input(5)  # Player has 5 seconds to make a quantum move
            if move is None:
                print(f"Time's up! {current_player_name} loses 1 point.")
                scoreboard[current_player_name] -= 1
                break

            if 0 <= move < 9 and board[move] == ' ':
                board[move] = mark
                circuit.x(move)  # Apply X gate to represent the move
                break
            else:
                print("Invalid move. Tile already occupied or out of range.")

        # If time's up, skip the player's turn
        if move is None:
            break

        # Print updated board
        print(f"{current_player_name}'s move:")
        print_board(board)

        # Confirm move or undo
        if not undo_used[current_player_name]:
            choice = input(f"{current_player_name}, do you want to [C]ontinue or [U]ndo your move? ").strip().lower()
            if choice == 'u':
                print("Undoing your move...")
                board[move] = ' '  # Revert move
                undo_used[current_player_name] = True  # Mark undo as used
                continue  # Restart turn for the same player

        # Check for a winner
        if check_winner(board, mark):
            winner = current_player_name
            print(f"Congratulations {winner}! You win!")
            scoreboard[winner] += 1
            break

        # Proceed to the next turn
        turn += 1

    # Check for a draw if no winner
    if not winner:
        print("It's a draw! No one wins.")

    # Save the circuit diagram
    filename = f"circuit_{winner.replace(' ', '_') if winner else 'Draw'}.png"
    circuit.measure(list(range(9)), list(range(9)))
    circuit.draw(output='mpl')
    plt.savefig(filename)
    print(f"Circuit diagram saved as {filename}.")

    # Display scoreboard
    print("\nCurrent Scoreboard:")
    for player, score in scoreboard.items():
        print(f"{player}: {score}")

    # Continue or exit
    choice = input("Do you want to play another game? (yes/no): ").strip().lower()
    if choice != 'yes':
        print("Thank you for playing! Final Scores:")
        for player, score in scoreboard.items():
            print(f"{player}: {score}")
        break
