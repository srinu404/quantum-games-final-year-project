from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
from qiskit import execute, BasicAer
from qiskit.visualization import plot_histogram

# Initialize player positions and entangled cells
l_player_1 = []  # Player 1 tiles
l_player_2 = []  # Player 2 tiles
l_entangled = [(1, 6), (7, 8), (4, 5)]  # Pairs of entangled tiles

# Quantum circuit setup
circuit = QuantumCircuit(9, 9)
circuit.name = "Tic-Tac-Toe Quantum"

def print_board(board):
    print('-----')
    print(f'{board[6]}|{board[7]}|{board[8]}')
    print('-----')
    print(f'{board[3]}|{board[4]}|{board[5]}')
    print('-----')
    print(f'{board[0]}|{board[1]}|{board[2]}')
    print('-----')

def check_winner(board, mark):
    return (
        (board[0] == mark and board[1] == mark and board[2] == mark) or  # Row 1
        (board[3] == mark and board[4] == mark and board[5] == mark) or  # Row 2
        (board[6] == mark and board[7] == mark and board[8] == mark) or  # Row 3
        (board[0] == mark and board[3] == mark and board[6] == mark) or  # Column 1
        (board[1] == mark and board[4] == mark and board[7] == mark) or  # Column 2
        (board[2] == mark and board[5] == mark and board[8] == mark) or  # Column 3
        (board[0] == mark and board[4] == mark and board[8] == mark) or  # Diagonal 1
        (board[2] == mark and board[4] == mark and board[6] == mark)     # Diagonal 2
    )

# Game loop
flag_p1, flag_p2 = 0, 0
board = [' ' for _ in range(9)]  # Initial empty board

# Initialize entangled states
for entangled_pair in l_entangled:
    circuit.h(entangled_pair[0])  # Hadamard gate
    circuit.x(entangled_pair[1])  # X gate
    circuit.cx(entangled_pair[0], entangled_pair[1])  # Controlled-X gate

while True:
    # Player 1's turn
    while True:
        move_p1 = int(input("Player 1, enter your move (0-8): "))
        if board[move_p1] == ' ':
            board[move_p1] = 'X'
            l_player_1.append(move_p1)
            break
        else:
            print("Invalid move. Tile already occupied.")

    circuit.x(move_p1)  # Player 1's move as X gate
    print("Player 1's move:")
    print_board(board)

    if check_winner(board, 'X'):
        print("Player 1 wins!")
        break

    # Player 2's turn
    while True:
        move_p2 = int(input("Player 2, enter your move (0-8): "))
        if board[move_p2] == ' ':
            board[move_p2] = 'O'
            l_player_2.append(move_p2)
            break
        else:
            print("Invalid move. Tile already occupied.")

    circuit.x(move_p2)  # Player 2's move as X gate
    print("Player 2's move:")
    print_board(board)

    if check_winner(board, 'O'):
        print("Player 2 wins!")
        break

    print("No winners yet, continuing the game...")

# Final measurement
circuit.measure(list(range(9)), list(range(9)))
print("Final Quantum Circuit:")
circuit.draw(output='mpl')

